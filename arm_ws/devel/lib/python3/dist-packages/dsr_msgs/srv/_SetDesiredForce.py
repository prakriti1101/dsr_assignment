# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dsr_msgs/SetDesiredForceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetDesiredForceRequest(genpy.Message):
  _md5sum = "c08817a2f4a41a3c34c4508a26e9e1a8"
  _type = "dsr_msgs/SetDesiredForceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#____________________________________________________________________________________________
# set_desired_force  
#____________________________________________________________________________________________

float64[6] fd                # Three translational target forces + Three rotational target moments
int8[6]    dir               # Force control in the corresponding direction if 1, Compliance control in the corresponding direction if 0
int8       ref               # Reference coordinate of the coordinate to get
float64    time # 0          # Transition time of target force to take effect (0 ~ 1.0 sec)
int8       mod               # DR_FC_MOD_ABS(0): force control with absolute value, 
                             # DR_FC_MOD_REL(1): force control with relative value to initial state (the instance when this function is called) 
"""
  __slots__ = ['fd','dir','ref','time','mod']
  _slot_types = ['float64[6]','int8[6]','int8','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fd,dir,ref,time,mod

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetDesiredForceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fd is None:
        self.fd = [0.] * 6
      if self.dir is None:
        self.dir = [0] * 6
      if self.ref is None:
        self.ref = 0
      if self.time is None:
        self.time = 0.
      if self.mod is None:
        self.mod = 0
    else:
      self.fd = [0.] * 6
      self.dir = [0] * 6
      self.ref = 0
      self.time = 0.
      self.mod = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_6d().pack(*self.fd))
      buff.write(_get_struct_6b().pack(*self.dir))
      _x = self
      buff.write(_get_struct_bdb().pack(_x.ref, _x.time, _x.mod))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 48
      self.fd = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 6
      self.dir = _get_struct_6b().unpack(str[start:end])
      _x = self
      start = end
      end += 10
      (_x.ref, _x.time, _x.mod,) = _get_struct_bdb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.fd.tostring())
      buff.write(self.dir.tostring())
      _x = self
      buff.write(_get_struct_bdb().pack(_x.ref, _x.time, _x.mod))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 48
      self.fd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 6
      self.dir = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=6)
      _x = self
      start = end
      end += 10
      (_x.ref, _x.time, _x.mod,) = _get_struct_bdb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6b = None
def _get_struct_6b():
    global _struct_6b
    if _struct_6b is None:
        _struct_6b = struct.Struct("<6b")
    return _struct_6b
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_bdb = None
def _get_struct_bdb():
    global _struct_bdb
    if _struct_bdb is None:
        _struct_bdb = struct.Struct("<bdb")
    return _struct_bdb
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dsr_msgs/SetDesiredForceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetDesiredForceResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "dsr_msgs/SetDesiredForceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool       success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetDesiredForceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetDesiredForce(object):
  _type          = 'dsr_msgs/SetDesiredForce'
  _md5sum = '06a47c6fc3ae37ec04174ee64d651e04'
  _request_class  = SetDesiredForceRequest
  _response_class = SetDesiredForceResponse
