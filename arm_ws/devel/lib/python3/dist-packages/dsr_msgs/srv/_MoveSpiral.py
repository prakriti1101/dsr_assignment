# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dsr_msgs/MoveSpiralRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveSpiralRequest(genpy.Message):
  _md5sum = "d5d20768cc7c6e3fb127c70920255d0e"
  _type = "dsr_msgs/MoveSpiralRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#____________________________________________________________________________________________
# move_sprial  
#____________________________________________________________________________________________

float64    revolution       # Total number of revolutions 
float64    maxRadius        # Final spiral radius [mm]
float64    maxLength        # Distance moved in the axis direction [mm]
float64[2] vel              # set velocity: [mm/sec], [deg/sec]
float64[2] acc              # set acceleration: [mm/sec2], [deg/sec2]
float64    time #= 0.0      # Total execution time <sec> 
int8       taskAxis         # TASK_AXIS_X = 0, TASK_AXIS_Y = 1, TASK_AXIS_Z = 2   
int8       ref  #= 1        # DR_BASE(0), DR_TOOL(1), DR_WORLD(2)
                            # <DR_WORLD is only available in M2.40 or later 
int8       syncType #=0     # SYNC = 0, ASYNC = 1 
"""
  __slots__ = ['revolution','maxRadius','maxLength','vel','acc','time','taskAxis','ref','syncType']
  _slot_types = ['float64','float64','float64','float64[2]','float64[2]','float64','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       revolution,maxRadius,maxLength,vel,acc,time,taskAxis,ref,syncType

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveSpiralRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.revolution is None:
        self.revolution = 0.
      if self.maxRadius is None:
        self.maxRadius = 0.
      if self.maxLength is None:
        self.maxLength = 0.
      if self.vel is None:
        self.vel = [0.] * 2
      if self.acc is None:
        self.acc = [0.] * 2
      if self.time is None:
        self.time = 0.
      if self.taskAxis is None:
        self.taskAxis = 0
      if self.ref is None:
        self.ref = 0
      if self.syncType is None:
        self.syncType = 0
    else:
      self.revolution = 0.
      self.maxRadius = 0.
      self.maxLength = 0.
      self.vel = [0.] * 2
      self.acc = [0.] * 2
      self.time = 0.
      self.taskAxis = 0
      self.ref = 0
      self.syncType = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.revolution, _x.maxRadius, _x.maxLength))
      buff.write(_get_struct_2d().pack(*self.vel))
      buff.write(_get_struct_2d().pack(*self.acc))
      _x = self
      buff.write(_get_struct_d3b().pack(_x.time, _x.taskAxis, _x.ref, _x.syncType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.revolution, _x.maxRadius, _x.maxLength,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 16
      self.vel = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.acc = _get_struct_2d().unpack(str[start:end])
      _x = self
      start = end
      end += 11
      (_x.time, _x.taskAxis, _x.ref, _x.syncType,) = _get_struct_d3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.revolution, _x.maxRadius, _x.maxLength))
      buff.write(self.vel.tostring())
      buff.write(self.acc.tostring())
      _x = self
      buff.write(_get_struct_d3b().pack(_x.time, _x.taskAxis, _x.ref, _x.syncType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.revolution, _x.maxRadius, _x.maxLength,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 16
      self.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 11
      (_x.time, _x.taskAxis, _x.ref, _x.syncType,) = _get_struct_d3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_d3b = None
def _get_struct_d3b():
    global _struct_d3b
    if _struct_d3b is None:
        _struct_d3b = struct.Struct("<d3b")
    return _struct_d3b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dsr_msgs/MoveSpiralResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveSpiralResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "dsr_msgs/MoveSpiralResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveSpiralResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class MoveSpiral(object):
  _type          = 'dsr_msgs/MoveSpiral'
  _md5sum = 'fc2c602cd43258b5eb06926d790138ea'
  _request_class  = MoveSpiralRequest
  _response_class = MoveSpiralResponse
