// Generated by gencpp from file dsr_msgs/TorqueRTStream.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_TORQUERTSTREAM_H
#define DSR_MSGS_MESSAGE_TORQUERTSTREAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct TorqueRTStream_
{
  typedef TorqueRTStream_<ContainerAllocator> Type;

  TorqueRTStream_()
    : tor()
    , time(0.0)  {
      tor.assign(0.0);
  }
  TorqueRTStream_(const ContainerAllocator& _alloc)
    : tor()
    , time(0.0)  {
  (void)_alloc;
      tor.assign(0.0);
  }



   typedef boost::array<double, 6>  _tor_type;
  _tor_type tor;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> const> ConstPtr;

}; // struct TorqueRTStream_

typedef ::dsr_msgs::TorqueRTStream_<std::allocator<void> > TorqueRTStream;

typedef boost::shared_ptr< ::dsr_msgs::TorqueRTStream > TorqueRTStreamPtr;
typedef boost::shared_ptr< ::dsr_msgs::TorqueRTStream const> TorqueRTStreamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::TorqueRTStream_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::TorqueRTStream_<ContainerAllocator1> & lhs, const ::dsr_msgs::TorqueRTStream_<ContainerAllocator2> & rhs)
{
  return lhs.tor == rhs.tor &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::TorqueRTStream_<ContainerAllocator1> & lhs, const ::dsr_msgs::TorqueRTStream_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f87591a62093bf8e8f3ad8edb630f87d";
  }

  static const char* value(const ::dsr_msgs::TorqueRTStream_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf87591a62093bf8eULL;
  static const uint64_t static_value2 = 0x8f3ad8edb630f87dULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/TorqueRTStream";
  }

  static const char* value(const ::dsr_msgs::TorqueRTStream_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# torque_rt\n"
"# \n"
"#____________________________________________________________________________________________\n"
"\n"
"float64[6] tor               # motor torque\n"
"float64    time              # time\n"
;
  }

  static const char* value(const ::dsr_msgs::TorqueRTStream_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tor);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TorqueRTStream_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::TorqueRTStream_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::TorqueRTStream_<ContainerAllocator>& v)
  {
    s << indent << "tor[]" << std::endl;
    for (size_t i = 0; i < v.tor.size(); ++i)
    {
      s << indent << "  tor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tor[i]);
    }
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_TORQUERTSTREAM_H
