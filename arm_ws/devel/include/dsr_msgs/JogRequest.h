// Generated by gencpp from file dsr_msgs/JogRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_JOGREQUEST_H
#define DSR_MSGS_MESSAGE_JOGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct JogRequest_
{
  typedef JogRequest_<ContainerAllocator> Type;

  JogRequest_()
    : jog_axis(0)
    , move_reference(0)
    , speed(0.0)  {
    }
  JogRequest_(const ContainerAllocator& _alloc)
    : jog_axis(0)
    , move_reference(0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _jog_axis_type;
  _jog_axis_type jog_axis;

   typedef int8_t _move_reference_type;
  _move_reference_type move_reference;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::dsr_msgs::JogRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::JogRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JogRequest_

typedef ::dsr_msgs::JogRequest_<std::allocator<void> > JogRequest;

typedef boost::shared_ptr< ::dsr_msgs::JogRequest > JogRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::JogRequest const> JogRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::JogRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::JogRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::JogRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::JogRequest_<ContainerAllocator2> & rhs)
{
  return lhs.jog_axis == rhs.jog_axis &&
    lhs.move_reference == rhs.move_reference &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::JogRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::JogRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::JogRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::JogRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::JogRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::JogRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::JogRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::JogRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::JogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c13ac7ab516c83d7b08a3f54803e5e30";
  }

  static const char* value(const ::dsr_msgs::JogRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc13ac7ab516c83d7ULL;
  static const uint64_t static_value2 = 0xb08a3f54803e5e30ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::JogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/JogRequest";
  }

  static const char* value(const ::dsr_msgs::JogRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::JogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# single jog\n"
"# single jog speed = (250mm/s) x speed [%] \n"
"#____________________________________________________________________________________________\n"
"\n"
"int8 jog_axis          # 0 ~ 5 : JOINT 1 ~ 6 \n"
"                       # 6 ~ 11: TASK 1 ~ 6 (X,Y,Z,rx,ry,rz)\n"
"int8 move_reference    # 0 : MOVE_REFERENCE_BASE, 1 : MOVE_REFERENCE_TOOL\n"
"float64 speed          # jog speed [%] : + forward , 0=stop, - backward  \n"
;
  }

  static const char* value(const ::dsr_msgs::JogRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::JogRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jog_axis);
      stream.next(m.move_reference);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JogRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::JogRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::JogRequest_<ContainerAllocator>& v)
  {
    s << indent << "jog_axis: ";
    Printer<int8_t>::stream(s, indent + "  ", v.jog_axis);
    s << indent << "move_reference: ";
    Printer<int8_t>::stream(s, indent + "  ", v.move_reference);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_JOGREQUEST_H
