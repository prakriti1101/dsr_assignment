// Generated by gencpp from file dsr_msgs/LogAlarm.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_LOGALARM_H
#define DSR_MSGS_MESSAGE_LOGALARM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct LogAlarm_
{
  typedef LogAlarm_<ContainerAllocator> Type;

  LogAlarm_()
    : level(0)
    , group(0)
    , index(0)
    , param()  {
    }
  LogAlarm_(const ContainerAllocator& _alloc)
    : level(0)
    , group(0)
    , index(0)
    , param()  {
      param.assign(std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>(_alloc));
  }



   typedef int32_t _level_type;
  _level_type level;

   typedef int32_t _group_type;
  _group_type group;

   typedef int32_t _index_type;
  _index_type index;

   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, 3>  _param_type;
  _param_type param;





  typedef boost::shared_ptr< ::dsr_msgs::LogAlarm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::LogAlarm_<ContainerAllocator> const> ConstPtr;

}; // struct LogAlarm_

typedef ::dsr_msgs::LogAlarm_<std::allocator<void> > LogAlarm;

typedef boost::shared_ptr< ::dsr_msgs::LogAlarm > LogAlarmPtr;
typedef boost::shared_ptr< ::dsr_msgs::LogAlarm const> LogAlarmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::LogAlarm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::LogAlarm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::LogAlarm_<ContainerAllocator1> & lhs, const ::dsr_msgs::LogAlarm_<ContainerAllocator2> & rhs)
{
  return lhs.level == rhs.level &&
    lhs.group == rhs.group &&
    lhs.index == rhs.index &&
    lhs.param == rhs.param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::LogAlarm_<ContainerAllocator1> & lhs, const ::dsr_msgs::LogAlarm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::LogAlarm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::LogAlarm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::LogAlarm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c127c7c1149264259595eb8c3ff9972c";
  }

  static const char* value(const ::dsr_msgs::LogAlarm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc127c7c114926425ULL;
  static const uint64_t static_value2 = 0x9595eb8c3ff9972cULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/LogAlarm";
  }

  static const char* value(const ::dsr_msgs::LogAlarm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# log of alarm\n"
"#____________________________________________________________________________________________\n"
"\n"
"int32         level\n"
"int32         group\n"
"int32         index\n"
"string[3]     param\n"
;
  }

  static const char* value(const ::dsr_msgs::LogAlarm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.level);
      stream.next(m.group);
      stream.next(m.index);
      stream.next(m.param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogAlarm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::LogAlarm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::LogAlarm_<ContainerAllocator>& v)
  {
    s << indent << "level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.level);
    s << indent << "group: ";
    Printer<int32_t>::stream(s, indent + "  ", v.group);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "param[]" << std::endl;
    for (size_t i = 0; i < v.param.size(); ++i)
    {
      s << indent << "  param[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.param[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_LOGALARM_H
