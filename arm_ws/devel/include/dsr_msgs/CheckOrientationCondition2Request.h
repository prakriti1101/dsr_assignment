// Generated by gencpp from file dsr_msgs/CheckOrientationCondition2Request.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_CHECKORIENTATIONCONDITION2REQUEST_H
#define DSR_MSGS_MESSAGE_CHECKORIENTATIONCONDITION2REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct CheckOrientationCondition2Request_
{
  typedef CheckOrientationCondition2Request_<ContainerAllocator> Type;

  CheckOrientationCondition2Request_()
    : axis(0)
    , min(0.0)
    , max(0.0)
    , ref(0)
    , mode(0)
    , pos()  {
      pos.assign(0.0);
  }
  CheckOrientationCondition2Request_(const ContainerAllocator& _alloc)
    : axis(0)
    , min(0.0)
    , max(0.0)
    , ref(0)
    , mode(0)
    , pos()  {
  (void)_alloc;
      pos.assign(0.0);
  }



   typedef int8_t _axis_type;
  _axis_type axis;

   typedef double _min_type;
  _min_type min;

   typedef double _max_type;
  _max_type max;

   typedef int8_t _ref_type;
  _ref_type ref;

   typedef int8_t _mode_type;
  _mode_type mode;

   typedef boost::array<double, 6>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> const> ConstPtr;

}; // struct CheckOrientationCondition2Request_

typedef ::dsr_msgs::CheckOrientationCondition2Request_<std::allocator<void> > CheckOrientationCondition2Request;

typedef boost::shared_ptr< ::dsr_msgs::CheckOrientationCondition2Request > CheckOrientationCondition2RequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::CheckOrientationCondition2Request const> CheckOrientationCondition2RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator1> & lhs, const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator2> & rhs)
{
  return lhs.axis == rhs.axis &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.ref == rhs.ref &&
    lhs.mode == rhs.mode &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator1> & lhs, const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d3262a8e9ab3de63fdcc959f41c4d44";
  }

  static const char* value(const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d3262a8e9ab3de6ULL;
  static const uint64_t static_value2 = 0x3fdcc959f41c4d44ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/CheckOrientationCondition2Request";
  }

  static const char* value(const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# check_orientation_condition(axis, min, max, ref, mod, pos)  \n"
"#____________________________________________________________________________________________\n"
"\n"
"int8       axis              # DR_AXIS_A(10), DR_AXIS_B(11), DR_AXIS_C(12) \n"
"float64    min               # minimum value  \n"
"float64    max               # maximum value  \n"
"int8       ref  #= 0         # DR_BASE(0), DR_TOOL(1), DR_WORLD(2), user_coordinate(101~200)\n"
"                             # <DR_WORLD is only available in M2.40 or later> \n"
"int8       mode #= 1         # DR_MV_MOD_REL(1)\n"
"float64[6] pos               # task pos(pos)  \n"
;
  }

  static const char* value(const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.axis);
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.ref);
      stream.next(m.mode);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckOrientationCondition2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::CheckOrientationCondition2Request_<ContainerAllocator>& v)
  {
    s << indent << "axis: ";
    Printer<int8_t>::stream(s, indent + "  ", v.axis);
    s << indent << "min: ";
    Printer<double>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<double>::stream(s, indent + "  ", v.max);
    s << indent << "ref: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ref);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_CHECKORIENTATIONCONDITION2REQUEST_H
