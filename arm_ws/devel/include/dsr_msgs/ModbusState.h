// Generated by gencpp from file dsr_msgs/ModbusState.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_MODBUSSTATE_H
#define DSR_MSGS_MESSAGE_MODBUSSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct ModbusState_
{
  typedef ModbusState_<ContainerAllocator> Type;

  ModbusState_()
    : modbus_symbol()
    , modbus_value(0)  {
    }
  ModbusState_(const ContainerAllocator& _alloc)
    : modbus_symbol(_alloc)
    , modbus_value(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _modbus_symbol_type;
  _modbus_symbol_type modbus_symbol;

   typedef int32_t _modbus_value_type;
  _modbus_value_type modbus_value;





  typedef boost::shared_ptr< ::dsr_msgs::ModbusState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::ModbusState_<ContainerAllocator> const> ConstPtr;

}; // struct ModbusState_

typedef ::dsr_msgs::ModbusState_<std::allocator<void> > ModbusState;

typedef boost::shared_ptr< ::dsr_msgs::ModbusState > ModbusStatePtr;
typedef boost::shared_ptr< ::dsr_msgs::ModbusState const> ModbusStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::ModbusState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::ModbusState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::ModbusState_<ContainerAllocator1> & lhs, const ::dsr_msgs::ModbusState_<ContainerAllocator2> & rhs)
{
  return lhs.modbus_symbol == rhs.modbus_symbol &&
    lhs.modbus_value == rhs.modbus_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::ModbusState_<ContainerAllocator1> & lhs, const ::dsr_msgs::ModbusState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::ModbusState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::ModbusState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::ModbusState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::ModbusState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::ModbusState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::ModbusState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::ModbusState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c941aa5cf7a235f21e3789f2d6e5305f";
  }

  static const char* value(const ::dsr_msgs::ModbusState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc941aa5cf7a235f2ULL;
  static const uint64_t static_value2 = 0x1e3789f2d6e5305fULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::ModbusState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/ModbusState";
  }

  static const char* value(const ::dsr_msgs::ModbusState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::ModbusState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"#Custom msg for RobotState.msg -- MAX_SIZE = 100\n"
"#____________________________________________________________________________________________\n"
"\n"
"string  modbus_symbol    # Modbus Signal Name\n"
"int32   modbus_value     # Modbus Register Value (Unsigned : 0 ~ 65535)\n"
;
  }

  static const char* value(const ::dsr_msgs::ModbusState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::ModbusState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.modbus_symbol);
      stream.next(m.modbus_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModbusState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::ModbusState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::ModbusState_<ContainerAllocator>& v)
  {
    s << indent << "modbus_symbol: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.modbus_symbol);
    s << indent << "modbus_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.modbus_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_MODBUSSTATE_H
