// Generated by gencpp from file dsr_msgs/MovePeriodicRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_MOVEPERIODICREQUEST_H
#define DSR_MSGS_MESSAGE_MOVEPERIODICREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct MovePeriodicRequest_
{
  typedef MovePeriodicRequest_<ContainerAllocator> Type;

  MovePeriodicRequest_()
    : amp()
    , periodic()
    , acc(0.0)
    , repeat(0)
    , ref(0)
    , syncType(0)  {
      amp.assign(0.0);

      periodic.assign(0.0);
  }
  MovePeriodicRequest_(const ContainerAllocator& _alloc)
    : amp()
    , periodic()
    , acc(0.0)
    , repeat(0)
    , ref(0)
    , syncType(0)  {
  (void)_alloc;
      amp.assign(0.0);

      periodic.assign(0.0);
  }



   typedef boost::array<double, 6>  _amp_type;
  _amp_type amp;

   typedef boost::array<double, 6>  _periodic_type;
  _periodic_type periodic;

   typedef double _acc_type;
  _acc_type acc;

   typedef int8_t _repeat_type;
  _repeat_type repeat;

   typedef int8_t _ref_type;
  _ref_type ref;

   typedef int8_t _syncType_type;
  _syncType_type syncType;





  typedef boost::shared_ptr< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MovePeriodicRequest_

typedef ::dsr_msgs::MovePeriodicRequest_<std::allocator<void> > MovePeriodicRequest;

typedef boost::shared_ptr< ::dsr_msgs::MovePeriodicRequest > MovePeriodicRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::MovePeriodicRequest const> MovePeriodicRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator2> & rhs)
{
  return lhs.amp == rhs.amp &&
    lhs.periodic == rhs.periodic &&
    lhs.acc == rhs.acc &&
    lhs.repeat == rhs.repeat &&
    lhs.ref == rhs.ref &&
    lhs.syncType == rhs.syncType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b6eac8fb0c07b8dd41f6b01792ade3f";
  }

  static const char* value(const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b6eac8fb0c07b8dULL;
  static const uint64_t static_value2 = 0xd41f6b01792ade3fULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/MovePeriodicRequest";
  }

  static const char* value(const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# move_periodic  \n"
"#____________________________________________________________________________________________\n"
"\n"
"float64[6] amp              # Amplitude (motion between -amp and +amp) [mm] or [deg]   \n"
"float64[6] periodic         # Period (time for 1 cycle) [sec]\n"
"float64    acc              # Acc-, dec- time [sec] \n"
"int8       repeat           # Repetition count \n"
"int8       ref  #= 1        # DR_BASE(0), DR_TOOL(1), DR_WORLD(2)\n"
"                            # <DR_WORLD is only available in M2.40 or later \n"
"\n"
"int8       syncType #=0     # SYNC = 0, ASYNC = 1\n"
;
  }

  static const char* value(const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.amp);
      stream.next(m.periodic);
      stream.next(m.acc);
      stream.next(m.repeat);
      stream.next(m.ref);
      stream.next(m.syncType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovePeriodicRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::MovePeriodicRequest_<ContainerAllocator>& v)
  {
    s << indent << "amp[]" << std::endl;
    for (size_t i = 0; i < v.amp.size(); ++i)
    {
      s << indent << "  amp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.amp[i]);
    }
    s << indent << "periodic[]" << std::endl;
    for (size_t i = 0; i < v.periodic.size(); ++i)
    {
      s << indent << "  periodic[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.periodic[i]);
    }
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
    s << indent << "repeat: ";
    Printer<int8_t>::stream(s, indent + "  ", v.repeat);
    s << indent << "ref: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ref);
    s << indent << "syncType: ";
    Printer<int8_t>::stream(s, indent + "  ", v.syncType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_MOVEPERIODICREQUEST_H
