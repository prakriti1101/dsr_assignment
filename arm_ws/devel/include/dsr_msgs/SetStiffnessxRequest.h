// Generated by gencpp from file dsr_msgs/SetStiffnessxRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_SETSTIFFNESSXREQUEST_H
#define DSR_MSGS_MESSAGE_SETSTIFFNESSXREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct SetStiffnessxRequest_
{
  typedef SetStiffnessxRequest_<ContainerAllocator> Type;

  SetStiffnessxRequest_()
    : stx()
    , ref(0)
    , time(0.0)  {
      stx.assign(0.0);
  }
  SetStiffnessxRequest_(const ContainerAllocator& _alloc)
    : stx()
    , ref(0)
    , time(0.0)  {
  (void)_alloc;
      stx.assign(0.0);
  }



   typedef boost::array<double, 6>  _stx_type;
  _stx_type stx;

   typedef int8_t _ref_type;
  _ref_type ref;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetStiffnessxRequest_

typedef ::dsr_msgs::SetStiffnessxRequest_<std::allocator<void> > SetStiffnessxRequest;

typedef boost::shared_ptr< ::dsr_msgs::SetStiffnessxRequest > SetStiffnessxRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::SetStiffnessxRequest const> SetStiffnessxRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator2> & rhs)
{
  return lhs.stx == rhs.stx &&
    lhs.ref == rhs.ref &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba536f0d29ae89c9ddaf734ce5a3c8b1";
  }

  static const char* value(const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba536f0d29ae89c9ULL;
  static const uint64_t static_value2 = 0xddaf734ce5a3c8b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/SetStiffnessxRequest";
  }

  static const char* value(const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# set_stiffnessx  \n"
"#____________________________________________________________________________________________\n"
"\n"
"float64[6] stx               # default[500, 500, 500, 100, 100, 100], Three translational stiffnesses + Three rotational stiffnesses\n"
"int8       ref               # the preset reference coordinate system.\n"
"float64    time              # Stiffness varying time(0 ~ 1.0) [sec], Linear transition during the specified time   \n"
;
  }

  static const char* value(const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stx);
      stream.next(m.ref);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetStiffnessxRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::SetStiffnessxRequest_<ContainerAllocator>& v)
  {
    s << indent << "stx[]" << std::endl;
    for (size_t i = 0; i < v.stx.size(); ++i)
    {
      s << indent << "  stx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stx[i]);
    }
    s << indent << "ref: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ref);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_SETSTIFFNESSXREQUEST_H
