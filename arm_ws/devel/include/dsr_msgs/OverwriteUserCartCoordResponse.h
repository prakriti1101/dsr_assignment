// Generated by gencpp from file dsr_msgs/OverwriteUserCartCoordResponse.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_OVERWRITEUSERCARTCOORDRESPONSE_H
#define DSR_MSGS_MESSAGE_OVERWRITEUSERCARTCOORDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct OverwriteUserCartCoordResponse_
{
  typedef OverwriteUserCartCoordResponse_<ContainerAllocator> Type;

  OverwriteUserCartCoordResponse_()
    : id(0)
    , success(false)  {
    }
  OverwriteUserCartCoordResponse_(const ContainerAllocator& _alloc)
    : id(0)
    , success(false)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OverwriteUserCartCoordResponse_

typedef ::dsr_msgs::OverwriteUserCartCoordResponse_<std::allocator<void> > OverwriteUserCartCoordResponse;

typedef boost::shared_ptr< ::dsr_msgs::OverwriteUserCartCoordResponse > OverwriteUserCartCoordResponsePtr;
typedef boost::shared_ptr< ::dsr_msgs::OverwriteUserCartCoordResponse const> OverwriteUserCartCoordResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator1> & lhs, const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator1> & lhs, const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5845c23151db63ce4fa936d927189f8d";
  }

  static const char* value(const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5845c23151db63ceULL;
  static const uint64_t static_value2 = 0x4fa936d927189f8dULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/OverwriteUserCartCoordResponse";
  }

  static const char* value(const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8       id                # Successful coordinate setting, Set user coordinate ID (101 - 200)\n"
"                             # (-1) Failed coordinate setting\n"
"bool       success                             \n"
;
  }

  static const char* value(const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OverwriteUserCartCoordResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::OverwriteUserCartCoordResponse_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_OVERWRITEUSERCARTCOORDRESPONSE_H
