// Generated by gencpp from file dsr_msgs/WriteDataRTRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_WRITEDATARTREQUEST_H
#define DSR_MSGS_MESSAGE_WRITEDATARTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct WriteDataRTRequest_
{
  typedef WriteDataRTRequest_<ContainerAllocator> Type;

  WriteDataRTRequest_()
    : external_force_torque()
    , external_digital_input(0)
    , external_digital_output(0)
    , external_analog_input()
    , external_analog_output()  {
      external_force_torque.assign(0.0);

      external_analog_input.assign(0.0);

      external_analog_output.assign(0.0);
  }
  WriteDataRTRequest_(const ContainerAllocator& _alloc)
    : external_force_torque()
    , external_digital_input(0)
    , external_digital_output(0)
    , external_analog_input()
    , external_analog_output()  {
  (void)_alloc;
      external_force_torque.assign(0.0);

      external_analog_input.assign(0.0);

      external_analog_output.assign(0.0);
  }



   typedef boost::array<double, 6>  _external_force_torque_type;
  _external_force_torque_type external_force_torque;

   typedef int32_t _external_digital_input_type;
  _external_digital_input_type external_digital_input;

   typedef int32_t _external_digital_output_type;
  _external_digital_output_type external_digital_output;

   typedef boost::array<double, 6>  _external_analog_input_type;
  _external_analog_input_type external_analog_input;

   typedef boost::array<double, 6>  _external_analog_output_type;
  _external_analog_output_type external_analog_output;





  typedef boost::shared_ptr< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WriteDataRTRequest_

typedef ::dsr_msgs::WriteDataRTRequest_<std::allocator<void> > WriteDataRTRequest;

typedef boost::shared_ptr< ::dsr_msgs::WriteDataRTRequest > WriteDataRTRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::WriteDataRTRequest const> WriteDataRTRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator2> & rhs)
{
  return lhs.external_force_torque == rhs.external_force_torque &&
    lhs.external_digital_input == rhs.external_digital_input &&
    lhs.external_digital_output == rhs.external_digital_output &&
    lhs.external_analog_input == rhs.external_analog_input &&
    lhs.external_analog_output == rhs.external_analog_output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0677aa4f576b1a48e5f18c66c91f29d4";
  }

  static const char* value(const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0677aa4f576b1a48ULL;
  static const uint64_t static_value2 = 0xe5f18c66c91f29d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/WriteDataRTRequest";
  }

  static const char* value(const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# write_data_rt\n"
"#____________________________________________________________________________________________\n"
"float64[6] external_force_torque\n"
"int32      external_digital_input\n"
"int32      external_digital_output\n"
"float64[6] external_analog_input\n"
"float64[6] external_analog_output\n"
;
  }

  static const char* value(const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.external_force_torque);
      stream.next(m.external_digital_input);
      stream.next(m.external_digital_output);
      stream.next(m.external_analog_input);
      stream.next(m.external_analog_output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WriteDataRTRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::WriteDataRTRequest_<ContainerAllocator>& v)
  {
    s << indent << "external_force_torque[]" << std::endl;
    for (size_t i = 0; i < v.external_force_torque.size(); ++i)
    {
      s << indent << "  external_force_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.external_force_torque[i]);
    }
    s << indent << "external_digital_input: ";
    Printer<int32_t>::stream(s, indent + "  ", v.external_digital_input);
    s << indent << "external_digital_output: ";
    Printer<int32_t>::stream(s, indent + "  ", v.external_digital_output);
    s << indent << "external_analog_input[]" << std::endl;
    for (size_t i = 0; i < v.external_analog_input.size(); ++i)
    {
      s << indent << "  external_analog_input[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.external_analog_input[i]);
    }
    s << indent << "external_analog_output[]" << std::endl;
    for (size_t i = 0; i < v.external_analog_output.size(); ++i)
    {
      s << indent << "  external_analog_output[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.external_analog_output[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_WRITEDATARTREQUEST_H
