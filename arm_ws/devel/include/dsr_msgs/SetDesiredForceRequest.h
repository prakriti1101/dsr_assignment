// Generated by gencpp from file dsr_msgs/SetDesiredForceRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_SETDESIREDFORCEREQUEST_H
#define DSR_MSGS_MESSAGE_SETDESIREDFORCEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct SetDesiredForceRequest_
{
  typedef SetDesiredForceRequest_<ContainerAllocator> Type;

  SetDesiredForceRequest_()
    : fd()
    , dir()
    , ref(0)
    , time(0.0)
    , mod(0)  {
      fd.assign(0.0);

      dir.assign(0);
  }
  SetDesiredForceRequest_(const ContainerAllocator& _alloc)
    : fd()
    , dir()
    , ref(0)
    , time(0.0)
    , mod(0)  {
  (void)_alloc;
      fd.assign(0.0);

      dir.assign(0);
  }



   typedef boost::array<double, 6>  _fd_type;
  _fd_type fd;

   typedef boost::array<int8_t, 6>  _dir_type;
  _dir_type dir;

   typedef int8_t _ref_type;
  _ref_type ref;

   typedef double _time_type;
  _time_type time;

   typedef int8_t _mod_type;
  _mod_type mod;





  typedef boost::shared_ptr< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetDesiredForceRequest_

typedef ::dsr_msgs::SetDesiredForceRequest_<std::allocator<void> > SetDesiredForceRequest;

typedef boost::shared_ptr< ::dsr_msgs::SetDesiredForceRequest > SetDesiredForceRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::SetDesiredForceRequest const> SetDesiredForceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.fd == rhs.fd &&
    lhs.dir == rhs.dir &&
    lhs.ref == rhs.ref &&
    lhs.time == rhs.time &&
    lhs.mod == rhs.mod;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c08817a2f4a41a3c34c4508a26e9e1a8";
  }

  static const char* value(const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc08817a2f4a41a3cULL;
  static const uint64_t static_value2 = 0x34c4508a26e9e1a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/SetDesiredForceRequest";
  }

  static const char* value(const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# set_desired_force  \n"
"#____________________________________________________________________________________________\n"
"\n"
"float64[6] fd                # Three translational target forces + Three rotational target moments\n"
"int8[6]    dir               # Force control in the corresponding direction if 1, Compliance control in the corresponding direction if 0\n"
"int8       ref               # Reference coordinate of the coordinate to get\n"
"float64    time # 0          # Transition time of target force to take effect (0 ~ 1.0 sec)\n"
"int8       mod               # DR_FC_MOD_ABS(0): force control with absolute value, \n"
"                             # DR_FC_MOD_REL(1): force control with relative value to initial state (the instance when this function is called) \n"
;
  }

  static const char* value(const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fd);
      stream.next(m.dir);
      stream.next(m.ref);
      stream.next(m.time);
      stream.next(m.mod);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetDesiredForceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::SetDesiredForceRequest_<ContainerAllocator>& v)
  {
    s << indent << "fd[]" << std::endl;
    for (size_t i = 0; i < v.fd.size(); ++i)
    {
      s << indent << "  fd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fd[i]);
    }
    s << indent << "dir[]" << std::endl;
    for (size_t i = 0; i < v.dir.size(); ++i)
    {
      s << indent << "  dir[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.dir[i]);
    }
    s << indent << "ref: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ref);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "mod: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mod);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_SETDESIREDFORCEREQUEST_H
