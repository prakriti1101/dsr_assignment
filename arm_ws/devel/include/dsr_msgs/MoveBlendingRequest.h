// Generated by gencpp from file dsr_msgs/MoveBlendingRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_MOVEBLENDINGREQUEST_H
#define DSR_MSGS_MESSAGE_MOVEBLENDINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64MultiArray.h>

namespace dsr_msgs
{
template <class ContainerAllocator>
struct MoveBlendingRequest_
{
  typedef MoveBlendingRequest_<ContainerAllocator> Type;

  MoveBlendingRequest_()
    : segment()
    , posCnt(0)
    , vel()
    , acc()
    , time(0.0)
    , ref(0)
    , mode(0)
    , syncType(0)  {
      vel.assign(0.0);

      acc.assign(0.0);
  }
  MoveBlendingRequest_(const ContainerAllocator& _alloc)
    : segment(_alloc)
    , posCnt(0)
    , vel()
    , acc()
    , time(0.0)
    , ref(0)
    , mode(0)
    , syncType(0)  {
  (void)_alloc;
      vel.assign(0.0);

      acc.assign(0.0);
  }



   typedef std::vector< ::std_msgs::Float64MultiArray_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Float64MultiArray_<ContainerAllocator> >> _segment_type;
  _segment_type segment;

   typedef int8_t _posCnt_type;
  _posCnt_type posCnt;

   typedef boost::array<double, 2>  _vel_type;
  _vel_type vel;

   typedef boost::array<double, 2>  _acc_type;
  _acc_type acc;

   typedef double _time_type;
  _time_type time;

   typedef int8_t _ref_type;
  _ref_type ref;

   typedef int8_t _mode_type;
  _mode_type mode;

   typedef int8_t _syncType_type;
  _syncType_type syncType;





  typedef boost::shared_ptr< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveBlendingRequest_

typedef ::dsr_msgs::MoveBlendingRequest_<std::allocator<void> > MoveBlendingRequest;

typedef boost::shared_ptr< ::dsr_msgs::MoveBlendingRequest > MoveBlendingRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::MoveBlendingRequest const> MoveBlendingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.segment == rhs.segment &&
    lhs.posCnt == rhs.posCnt &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.time == rhs.time &&
    lhs.ref == rhs.ref &&
    lhs.mode == rhs.mode &&
    lhs.syncType == rhs.syncType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed742b5d9ac862a827abaa0e77801ff8";
  }

  static const char* value(const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed742b5d9ac862a8ULL;
  static const uint64_t static_value2 = 0x27abaa0e77801ff8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/MoveBlendingRequest";
  }

  static const char* value(const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# move_blending  \n"
"#float64[50][6] pos              # target\n"
"#std_msgs/Float64MultiArray[] pos1   # target1 [50][6]\n"
"#std_msgs/Float64MultiArray[] pos2   # target2 [50][6]\n"
"#int8[50]       segment              # LINE=0 , CIRCLE=1\n"
"#float64[50]    radius               # Radius of segment \n"
"#____________________________________________________________________________________________\n"
"\n"
"std_msgs/Float64MultiArray[] segment #50 x (pos1[6]:pos2[6]:type[1]:radius[1])        \n"
"int8           posCnt               # target cnt \n"
"float64[2]     vel                  # set velocity: [mm/sec], [deg/sec]\n"
"float64[2]     acc                  # set acceleration: [mm/sec2], [deg/sec2]\n"
"float64        time #= 0.0          # Time [sec] \n"
"int8           ref                  # DR_BASE(0), DR_TOOL(1), DR_WORLD(2)\n"
"                                    # <DR_WORLD is only available in M2.40 or later \n"
"int8           mode #= 0            # MOVE_MODE_ABSOLUTE=0, MOVE_MODE_RELATIVE=1 \n"
"int8           syncType #=0         # SYNC = 0, ASYNC = 1\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment);
      stream.next(m.posCnt);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.time);
      stream.next(m.ref);
      stream.next(m.mode);
      stream.next(m.syncType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveBlendingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::MoveBlendingRequest_<ContainerAllocator>& v)
  {
    s << indent << "segment[]" << std::endl;
    for (size_t i = 0; i < v.segment.size(); ++i)
    {
      s << indent << "  segment[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.segment[i]);
    }
    s << indent << "posCnt: ";
    Printer<int8_t>::stream(s, indent + "  ", v.posCnt);
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "ref: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ref);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "syncType: ";
    Printer<int8_t>::stream(s, indent + "  ", v.syncType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_MOVEBLENDINGREQUEST_H
