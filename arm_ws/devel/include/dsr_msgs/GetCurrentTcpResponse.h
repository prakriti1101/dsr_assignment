// Generated by gencpp from file dsr_msgs/GetCurrentTcpResponse.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_GETCURRENTTCPRESPONSE_H
#define DSR_MSGS_MESSAGE_GETCURRENTTCPRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct GetCurrentTcpResponse_
{
  typedef GetCurrentTcpResponse_<ContainerAllocator> Type;

  GetCurrentTcpResponse_()
    : info()
    , success(false)  {
    }
  GetCurrentTcpResponse_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _info_type;
  _info_type info;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCurrentTcpResponse_

typedef ::dsr_msgs::GetCurrentTcpResponse_<std::allocator<void> > GetCurrentTcpResponse;

typedef boost::shared_ptr< ::dsr_msgs::GetCurrentTcpResponse > GetCurrentTcpResponsePtr;
typedef boost::shared_ptr< ::dsr_msgs::GetCurrentTcpResponse const> GetCurrentTcpResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator1> & lhs, const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator1> & lhs, const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ed9e7e2e2815d295b7f655584191cad";
  }

  static const char* value(const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ed9e7e2e2815d29ULL;
  static const uint64_t static_value2 = 0x5b7f655584191cadULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/GetCurrentTcpResponse";
  }

  static const char* value(const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string         info # tcp name\n"
"bool        success\n"
;
  }

  static const char* value(const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCurrentTcpResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::GetCurrentTcpResponse_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.info);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_GETCURRENTTCPRESPONSE_H
