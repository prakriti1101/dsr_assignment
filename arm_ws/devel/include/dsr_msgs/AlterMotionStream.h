// Generated by gencpp from file dsr_msgs/AlterMotionStream.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_ALTERMOTIONSTREAM_H
#define DSR_MSGS_MESSAGE_ALTERMOTIONSTREAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct AlterMotionStream_
{
  typedef AlterMotionStream_<ContainerAllocator> Type;

  AlterMotionStream_()
    : pos()  {
      pos.assign(0.0);
  }
  AlterMotionStream_(const ContainerAllocator& _alloc)
    : pos()  {
  (void)_alloc;
      pos.assign(0.0);
  }



   typedef boost::array<double, 6>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> const> ConstPtr;

}; // struct AlterMotionStream_

typedef ::dsr_msgs::AlterMotionStream_<std::allocator<void> > AlterMotionStream;

typedef boost::shared_ptr< ::dsr_msgs::AlterMotionStream > AlterMotionStreamPtr;
typedef boost::shared_ptr< ::dsr_msgs::AlterMotionStream const> AlterMotionStreamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::AlterMotionStream_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::AlterMotionStream_<ContainerAllocator1> & lhs, const ::dsr_msgs::AlterMotionStream_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::AlterMotionStream_<ContainerAllocator1> & lhs, const ::dsr_msgs::AlterMotionStream_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "537431324117c3d1847d70e057990155";
  }

  static const char* value(const ::dsr_msgs::AlterMotionStream_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x537431324117c3d1ULL;
  static const uint64_t static_value2 = 0x847d70e057990155ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/AlterMotionStream";
  }

  static const char* value(const ::dsr_msgs::AlterMotionStream_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# alter_motion  \n"
"# \n"
"#____________________________________________________________________________________________\n"
"\n"
"float64[6] pos               # position  \n"
;
  }

  static const char* value(const ::dsr_msgs::AlterMotionStream_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AlterMotionStream_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::AlterMotionStream_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::AlterMotionStream_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_ALTERMOTIONSTREAM_H
