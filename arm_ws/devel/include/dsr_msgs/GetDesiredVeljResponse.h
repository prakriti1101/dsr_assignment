// Generated by gencpp from file dsr_msgs/GetDesiredVeljResponse.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_GETDESIREDVELJRESPONSE_H
#define DSR_MSGS_MESSAGE_GETDESIREDVELJRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct GetDesiredVeljResponse_
{
  typedef GetDesiredVeljResponse_<ContainerAllocator> Type;

  GetDesiredVeljResponse_()
    : joint_vel()
    , success(false)  {
      joint_vel.assign(0.0);
  }
  GetDesiredVeljResponse_(const ContainerAllocator& _alloc)
    : joint_vel()
    , success(false)  {
  (void)_alloc;
      joint_vel.assign(0.0);
  }



   typedef boost::array<double, 6>  _joint_vel_type;
  _joint_vel_type joint_vel;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDesiredVeljResponse_

typedef ::dsr_msgs::GetDesiredVeljResponse_<std::allocator<void> > GetDesiredVeljResponse;

typedef boost::shared_ptr< ::dsr_msgs::GetDesiredVeljResponse > GetDesiredVeljResponsePtr;
typedef boost::shared_ptr< ::dsr_msgs::GetDesiredVeljResponse const> GetDesiredVeljResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator1> & lhs, const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joint_vel == rhs.joint_vel &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator1> & lhs, const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88bf0c6c29b23cd493e33b3354d4f21a";
  }

  static const char* value(const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88bf0c6c29b23cd4ULL;
  static const uint64_t static_value2 = 0x93e33b3354d4f21aULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/GetDesiredVeljResponse";
  }

  static const char* value(const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[6] joint_vel               # Target joint velocity \n"
"bool       success\n"
;
  }

  static const char* value(const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_vel);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDesiredVeljResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::GetDesiredVeljResponse_<ContainerAllocator>& v)
  {
    s << indent << "joint_vel[]" << std::endl;
    for (size_t i = 0; i < v.joint_vel.size(); ++i)
    {
      s << indent << "  joint_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_vel[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_GETDESIREDVELJRESPONSE_H
