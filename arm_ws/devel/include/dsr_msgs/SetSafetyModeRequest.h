// Generated by gencpp from file dsr_msgs/SetSafetyModeRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_SETSAFETYMODEREQUEST_H
#define DSR_MSGS_MESSAGE_SETSAFETYMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct SetSafetyModeRequest_
{
  typedef SetSafetyModeRequest_<ContainerAllocator> Type;

  SetSafetyModeRequest_()
    : safety_mode(0)
    , safety_mode_event(0)  {
    }
  SetSafetyModeRequest_(const ContainerAllocator& _alloc)
    : safety_mode(0)
    , safety_mode_event(0)  {
  (void)_alloc;
    }



   typedef int8_t _safety_mode_type;
  _safety_mode_type safety_mode;

   typedef int8_t _safety_mode_event_type;
  _safety_mode_event_type safety_mode_event;





  typedef boost::shared_ptr< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetSafetyModeRequest_

typedef ::dsr_msgs::SetSafetyModeRequest_<std::allocator<void> > SetSafetyModeRequest;

typedef boost::shared_ptr< ::dsr_msgs::SetSafetyModeRequest > SetSafetyModeRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::SetSafetyModeRequest const> SetSafetyModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.safety_mode == rhs.safety_mode &&
    lhs.safety_mode_event == rhs.safety_mode_event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6504f596b701c2d5dab07a99c9b7f945";
  }

  static const char* value(const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6504f596b701c2d5ULL;
  static const uint64_t static_value2 = 0xdab07a99c9b7f945ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/SetSafetyModeRequest";
  }

  static const char* value(const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# set_safety_mode\n"
"#____________________________________________________________________________________________\n"
"\n"
"int8 safety_mode  \n"
"int8 safety_mode_event\n"
;
  }

  static const char* value(const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.safety_mode);
      stream.next(m.safety_mode_event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSafetyModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::SetSafetyModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "safety_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.safety_mode);
    s << indent << "safety_mode_event: ";
    Printer<int8_t>::stream(s, indent + "  ", v.safety_mode_event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_SETSAFETYMODEREQUEST_H
