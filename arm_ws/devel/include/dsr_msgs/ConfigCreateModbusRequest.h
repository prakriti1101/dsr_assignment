// Generated by gencpp from file dsr_msgs/ConfigCreateModbusRequest.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_CONFIGCREATEMODBUSREQUEST_H
#define DSR_MSGS_MESSAGE_CONFIGCREATEMODBUSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct ConfigCreateModbusRequest_
{
  typedef ConfigCreateModbusRequest_<ContainerAllocator> Type;

  ConfigCreateModbusRequest_()
    : name()
    , ip()
    , port(0)
    , reg_type(0)
    , index(0)
    , value(0)
    , slave_id(0)  {
    }
  ConfigCreateModbusRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , ip(_alloc)
    , port(0)
    , reg_type(0)
    , index(0)
    , value(0)
    , slave_id(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ip_type;
  _ip_type ip;

   typedef int32_t _port_type;
  _port_type port;

   typedef int8_t _reg_type_type;
  _reg_type_type reg_type;

   typedef int8_t _index_type;
  _index_type index;

   typedef int8_t _value_type;
  _value_type value;

   typedef int32_t _slave_id_type;
  _slave_id_type slave_id;





  typedef boost::shared_ptr< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigCreateModbusRequest_

typedef ::dsr_msgs::ConfigCreateModbusRequest_<std::allocator<void> > ConfigCreateModbusRequest;

typedef boost::shared_ptr< ::dsr_msgs::ConfigCreateModbusRequest > ConfigCreateModbusRequestPtr;
typedef boost::shared_ptr< ::dsr_msgs::ConfigCreateModbusRequest const> ConfigCreateModbusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.reg_type == rhs.reg_type &&
    lhs.index == rhs.index &&
    lhs.value == rhs.value &&
    lhs.slave_id == rhs.slave_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator1> & lhs, const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1976ab2b25981e03b4741ddfc2ade1f8";
  }

  static const char* value(const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1976ab2b25981e03ULL;
  static const uint64_t static_value2 = 0xb4741ddfc2ade1f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/ConfigCreateModbusRequest";
  }

  static const char* value(const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# config_create_modbus  \n"
"# This service registers the Modbus signal. \n"
"#____________________________________________________________________________________________\n"
"\n"
"string      name       # modbus signal symbol \n"
"string      ip         # external device ip\n"
"int32       port       # external device port     \n"
"int8        reg_type   # <MODBUS_REGISTER_TYPE>(0: discrete input, 1: coil, 2: input register, 3: holding register)\n"
"int8        index      # modbus signal index(0 ~ 9999)\n"
"int8        value      # modbus singla value(unsigned value ; 0 ~ 65535)\n"
"int32       slave_id   # Slave ID of the ModbusTCP(0: Broadcase address or 1-247 or 255: Default value for ModbusTCP) \n"
"                       # <slave_id is only available in M2.40 or later versions>  \n"
;
  }

  static const char* value(const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.reg_type);
      stream.next(m.index);
      stream.next(m.value);
      stream.next(m.slave_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigCreateModbusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::ConfigCreateModbusRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<int32_t>::stream(s, indent + "  ", v.port);
    s << indent << "reg_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reg_type);
    s << indent << "index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.index);
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
    s << indent << "slave_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.slave_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_CONFIGCREATEMODBUSREQUEST_H
