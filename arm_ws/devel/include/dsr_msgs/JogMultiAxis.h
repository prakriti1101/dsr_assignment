// Generated by gencpp from file dsr_msgs/JogMultiAxis.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_JOGMULTIAXIS_H
#define DSR_MSGS_MESSAGE_JOGMULTIAXIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct JogMultiAxis_
{
  typedef JogMultiAxis_<ContainerAllocator> Type;

  JogMultiAxis_()
    : jog_axis()
    , move_reference(0)
    , speed(0.0)  {
      jog_axis.assign(0.0);
  }
  JogMultiAxis_(const ContainerAllocator& _alloc)
    : jog_axis()
    , move_reference(0)
    , speed(0.0)  {
  (void)_alloc;
      jog_axis.assign(0.0);
  }



   typedef boost::array<double, 6>  _jog_axis_type;
  _jog_axis_type jog_axis;

   typedef int8_t _move_reference_type;
  _move_reference_type move_reference;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> const> ConstPtr;

}; // struct JogMultiAxis_

typedef ::dsr_msgs::JogMultiAxis_<std::allocator<void> > JogMultiAxis;

typedef boost::shared_ptr< ::dsr_msgs::JogMultiAxis > JogMultiAxisPtr;
typedef boost::shared_ptr< ::dsr_msgs::JogMultiAxis const> JogMultiAxisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::JogMultiAxis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::JogMultiAxis_<ContainerAllocator1> & lhs, const ::dsr_msgs::JogMultiAxis_<ContainerAllocator2> & rhs)
{
  return lhs.jog_axis == rhs.jog_axis &&
    lhs.move_reference == rhs.move_reference &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::JogMultiAxis_<ContainerAllocator1> & lhs, const ::dsr_msgs::JogMultiAxis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e36e615ff2ffad91791b721818ab6be9";
  }

  static const char* value(const ::dsr_msgs::JogMultiAxis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe36e615ff2ffad91ULL;
  static const uint64_t static_value2 = 0x791b721818ab6be9ULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/JogMultiAxis";
  }

  static const char* value(const ::dsr_msgs::JogMultiAxis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# multi jog\n"
"# multi jog speed = (250mm/s x 1.73) x unit vecter x speed [%] \n"
"#____________________________________________________________________________________________\n"
"\n"
"float64[6]  jog_axis          # unit vecter of Task space [Tx, Ty, Tz, Rx, Ry, Rz] : -1.0 ~ +1.0 \n"
"int8        move_reference    # 0 : MOVE_REFERENCE_BASE, 1 : MOVE_REFERENCE_TOOL, 2 : MOVE_REFERENCE_WORLD\n"
"float64     speed             # jog speed [%]\n"
;
  }

  static const char* value(const ::dsr_msgs::JogMultiAxis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jog_axis);
      stream.next(m.move_reference);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JogMultiAxis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::JogMultiAxis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::JogMultiAxis_<ContainerAllocator>& v)
  {
    s << indent << "jog_axis[]" << std::endl;
    for (size_t i = 0; i < v.jog_axis.size(); ++i)
    {
      s << indent << "  jog_axis[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.jog_axis[i]);
    }
    s << indent << "move_reference: ";
    Printer<int8_t>::stream(s, indent + "  ", v.move_reference);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_JOGMULTIAXIS_H
