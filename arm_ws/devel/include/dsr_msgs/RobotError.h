// Generated by gencpp from file dsr_msgs/RobotError.msg
// DO NOT EDIT!


#ifndef DSR_MSGS_MESSAGE_ROBOTERROR_H
#define DSR_MSGS_MESSAGE_ROBOTERROR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dsr_msgs
{
template <class ContainerAllocator>
struct RobotError_
{
  typedef RobotError_<ContainerAllocator> Type;

  RobotError_()
    : level(0)
    , group(0)
    , code(0)
    , msg1()
    , msg2()
    , msg3()  {
    }
  RobotError_(const ContainerAllocator& _alloc)
    : level(0)
    , group(0)
    , code(0)
    , msg1(_alloc)
    , msg2(_alloc)
    , msg3(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _level_type;
  _level_type level;

   typedef int32_t _group_type;
  _group_type group;

   typedef int32_t _code_type;
  _code_type code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg1_type;
  _msg1_type msg1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg2_type;
  _msg2_type msg2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg3_type;
  _msg3_type msg3;





  typedef boost::shared_ptr< ::dsr_msgs::RobotError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dsr_msgs::RobotError_<ContainerAllocator> const> ConstPtr;

}; // struct RobotError_

typedef ::dsr_msgs::RobotError_<std::allocator<void> > RobotError;

typedef boost::shared_ptr< ::dsr_msgs::RobotError > RobotErrorPtr;
typedef boost::shared_ptr< ::dsr_msgs::RobotError const> RobotErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dsr_msgs::RobotError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dsr_msgs::RobotError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dsr_msgs::RobotError_<ContainerAllocator1> & lhs, const ::dsr_msgs::RobotError_<ContainerAllocator2> & rhs)
{
  return lhs.level == rhs.level &&
    lhs.group == rhs.group &&
    lhs.code == rhs.code &&
    lhs.msg1 == rhs.msg1 &&
    lhs.msg2 == rhs.msg2 &&
    lhs.msg3 == rhs.msg3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dsr_msgs::RobotError_<ContainerAllocator1> & lhs, const ::dsr_msgs::RobotError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dsr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::RobotError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dsr_msgs::RobotError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::RobotError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dsr_msgs::RobotError_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::RobotError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dsr_msgs::RobotError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dsr_msgs::RobotError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d9680ace6867f719d7e19bbc321e6da";
  }

  static const char* value(const ::dsr_msgs::RobotError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d9680ace6867f71ULL;
  static const uint64_t static_value2 = 0x9d7e19bbc321e6daULL;
};

template<class ContainerAllocator>
struct DataType< ::dsr_msgs::RobotError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dsr_msgs/RobotError";
  }

  static const char* value(const ::dsr_msgs::RobotError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dsr_msgs::RobotError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#____________________________________________________________________________________________\n"
"# [ robot error msg ] \n"
"#____________________________________________________________________________________________\n"
"\n"
"int32	    level   # INFO =1, WARN =2, ERROR =3 \n"
"int32	    group   # SYSTEM =1, MOTION =2, TP =3, INVERTER =4, SAFETY_CONTROLLER =5   \n"
"int32	    code    # error code \n"
"string      msg1    # error msg 1\n"
"string      msg2    # error msg 2\n"
"string      msg3    # error msg 3\n"
;
  }

  static const char* value(const ::dsr_msgs::RobotError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dsr_msgs::RobotError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.level);
      stream.next(m.group);
      stream.next(m.code);
      stream.next(m.msg1);
      stream.next(m.msg2);
      stream.next(m.msg3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dsr_msgs::RobotError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dsr_msgs::RobotError_<ContainerAllocator>& v)
  {
    s << indent << "level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.level);
    s << indent << "group: ";
    Printer<int32_t>::stream(s, indent + "  ", v.group);
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "msg1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg1);
    s << indent << "msg2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg2);
    s << indent << "msg3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSR_MSGS_MESSAGE_ROBOTERROR_H
